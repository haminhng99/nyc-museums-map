# -*- coding: utf-8 -*-
"""museum price

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/190W6rZcbg6RUiD4l_sZp5lWahZetyFuV
"""

import csv

csv_file_path = '/content/nyc_museums_price (1).csv'

# Museum dictionary
museum_dict = {}

with open(csv_file_path, 'r') as csv_obj:
    reader = csv.DictReader(csv_obj)

    for row in reader:
        # Header to lower
        row = {key.lower(): value for key, value in row.items()}
        # Museum name is the main key
        museum_name = row['name']  # Corrected key
        museum_dict[museum_name] = row

museum_dict

import pandas as pd

# Path to the CSV file
csv_file_path = '/content/nyc_museums_price (1).csv'

# Read the CSV file into a pandas DataFrame
df = pd.read_csv(csv_file_path)

# Display the first few rows of the DataFrame to check
df

# Replace '\n' with an empty string for all columns
df = df.replace({'\n': ''}, regex=True)

# Display the cleaned dataset
df.head()

# First, clean up the 'rates' column by removing unwanted characters
df['rates'] = df['rates'].str.replace(r'\n', '', regex=True)  # Remove \n
df['rates'] = df['rates'].str.replace(r'admission: ', '', regex=True)  # Remove "admission: " if present
df['rates'] = df['rates'].str.replace(r'suggested admission: ', '', regex=True)  # Remove "suggested admission: " if present

# Split the 'rates' column by the semicolon (;) separator into new columns
rates_split = df['rates'].str.split(';', expand=True)

# Assign the split columns back to the DataFrame, ensuring we have exactly three columns
df['regular_admission'] = rates_split[0] if rates_split.shape[1] > 0 else None
df['seniors_students'] = rates_split[1] if rates_split.shape[1] > 1 else None
df['children_or_other'] = rates_split[2] if rates_split.shape[1] > 2 else None

# Clean up any leading or trailing spaces that might have been left after splitting
df['regular_admission'] = df['regular_admission'].str.strip()
df['seniors_students'] = df['seniors_students'].str.strip()
df['children_or_other'] = df['children_or_other'].str.strip()

# Display the updated dataframe with the split columns
df[['name', 'regular_admission', 'seniors_students', 'children_or_other']]

import re

# Function to extract the ticket price with $ symbol
def extract_price(text):
    match = re.search(r'\$([0-9,]+(?:\.[0-9]{1,2})?)', text)
    return match.group(0) if match else None

# Apply the function to the 'regular_admission' column
df['regular_admission'] = df['regular_admission'].apply(extract_price)

# Display the updated dataframe with the 'regular_admission' column cleaned
df

# Describe the 'admission' column
df['regular_admission'].describe()

import matplotlib.pyplot as plt
import seaborn as sns

# Remove '$' and convert to numeric
df['regular_admission'] = df['regular_admission'].replace({'\$': '', ',': ''}, regex=True).astype(float)

# Plotting the histogram to visualize the distribution of admission fees
plt.figure(figsize=(10, 6))
sns.histplot(df['regular_admission'].dropna(), kde=True, bins=20)
plt.title('Distribution of Regular Admission Fees')
plt.xlabel('Regular Admission Fee ($)')
plt.ylabel('Frequency')
plt.show()

# Check how many rows have values and how many have NaN in the 'specials' column
specials_count = df['specials'].notna().sum()
nan_count = df['specials'].isna().sum()

# Display the results
print(f"Number of rows with special offers (not NaN): {specials_count}")
print(f"Number of rows without special offers (NaN): {nan_count}")

import matplotlib.pyplot as plt

# Count the number of non-NaN and NaN values in the 'specials' column
specials_count = df['specials'].notna().sum()
nan_count = df['specials'].isna().sum()

# Data for the pie chart
labels = ['With Special Offers', 'Without Special Offers']
sizes = [specials_count, nan_count]
colors = ['#66b3ff', '#99ff99']  # Custom colors
explode = (0.1, 0)  # explode the first slice for emphasis

# Create the pie chart
plt.figure(figsize=(7, 7))
plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140, explode=explode)
plt.title('Special Offers in Museum Data', fontsize=14)
plt.axis('equal')  # Equal aspect ratio ensures that pie chart is drawn as a circle.

# Show the plot
plt.show()
