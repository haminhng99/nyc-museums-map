# -*- coding: utf-8 -*-
"""museums_nyc.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12Rze5hRBAqESKR9KDzyQ5oVcpcGU5Tox
"""

import csv

csv_file_path = '/content/nyc_museums_notcleaned.csv'

# Museum dictionary
museum_dict = {}

with open(csv_file_path, 'r') as csv_obj:
    reader = csv.DictReader(csv_obj)

    for row in reader:
        # Header to lower
        row = {key.lower(): value for key, value in row.items()}
        # Museum name is the main key
        museum_name = row['name']  # Corrected key
        museum_dict[museum_name] = row

museum_dict

import pandas as pd

# Path to the CSV file
csv_file_path = '/content/nyc_museums_notcleaned.csv'

# Read the CSV file into a pandas DataFrame
df = pd.read_csv(csv_file_path)

# Display the first few rows of the DataFrame to check
df
print(f"Number of rows after filtering: {df.shape[0]}")

# Get unique values from the 'type' column
unique_types = df['type'].unique()

# Display the unique values
print(sorted(unique_types))

# Filter out rows where 'type' is one of the specified values
values_to_remove = ['ZOO, AQUARIUM, OR WILDLIFE CONSERVATION', 'ARBORETUM, BOTANICAL GARDEN, OR NATURE CENTER','HISTORIC PRESERVATION']  # Add more values as needed
filtered_df = df[~df['type'].isin(values_to_remove)]
# Check the number of rows after filtering
print(f"Number of rows after filtering: {filtered_df.shape[0]}")
# Display the first few rows of the filtered DataFrame
filtered_df.head()

# Get unique values from 'admin_city' column
unique_cities = filtered_df['admin_city'].unique()

# Sort the unique cities alphabetically
sorted_cities = sorted(unique_cities)

# Print each city as a bullet point
for city in sorted_cities:
    print(f"- {city}")

# Define the mapping of cities to boroughs
boroughs = {
    'Manhattan': ['MANHATTAN', 'NEW YORK', 'NYC', 'NEW YORK CITY', 'NW YORK'],
    'Brooklyn': ['BROOKLYN', 'BROOKLYN HEIGHTS', 'RIDGEWOOD', 'SUNNYSIDE'],
    'Queens': ['ASTORIA', 'BAYSIDE', 'CORONA', 'DOUGLASTON', 'FLORAL PARK', 'FLUSHING', 'MASPETH', 'MIDDLE VILLAGE', 'OAKLAND GARDENS', 'PLEASANTVILLE', 'QUEENS', 'RICHMOND HILL', 'WOODHAVEN', 'WOODSIDE'],
    'Bronx': ['BRONX', 'JAMAICA', 'HOWARD BEACH', 'RIVERDALE', 'ROCKAWAY'],
    'Staten Island': ['STATEN ISLAND', 'ROOSEVELT ISL'],
    'Other': ['BUFFALO', 'HYDE PARK', 'LITTLE NECK', 'LONG IS CITY', 'LONG ISLAND', 'LONG ISLAND C']
}

# Create a function to map cities to boroughs
def get_borough(city):
    for borough, cities in boroughs.items():
        if city in cities:
            return borough
    return 'Unknown'  # Default if the city is not found

# Apply the function to create a new column 'borough' based on 'admin_city' in the filtered DataFrame
df_filtered['borough'] = df_filtered['admin_city'].apply(get_borough)

# Display the first few rows of the filtered DataFrame with the new column
df_filtered.head()

# Check how many organizations have income and/or revenue of zero
income_zero_count = filtered_df['income'].value_counts().get(0, 0)
revenue_zero_count = filtered_df['revenue'].value_counts().get(0, 0)

# Print the results
print(f"Number of organizations with zero income: {income_zero_count}")
print(f"Number of organizations with zero revenue: {revenue_zero_count}")

# Check for NaN values after filling
nan_income_count = filtered_df['income'].isna().sum()
nan_revenue_count = filtered_df['revenue'].isna().sum()

print(f"Number of NaN values in income column: {nan_income_count}")
print(f"Number of NaN values in revenue column: {nan_revenue_count}")

# Export the filtered DataFrame to a CSV file
filtered_df.to_csv('filtered_data.csv', index=False)

# Count the number of museums per borough
borough_counts = filtered_df['borough'].value_counts()

# Display the result
print(borough_counts)

# Filter the DataFrame for rows where the borough is 'Other'
other_borough_museums = filtered_df[filtered_df['borough'] == 'Other']

# Display the result with name, borough, and address
print(other_borough_museums[['name', 'borough', 'admin_street_address']])

# Directly update the borough for each specific museum
filtered_df.loc[filtered_df['name'] == 'AMERICAN FOLK ART MUSEUM', 'borough'] = 'MANHATTAN'
filtered_df.loc[filtered_df['name'] == 'EL MUSEO DEL BARRIO', 'borough'] = 'MANHATTAN'
filtered_df.loc[filtered_df['name'] == 'FDR PRESIDENTIAL LIBRARY', 'borough'] = 'MANHATTAN'
filtered_df.loc[filtered_df['name'] == 'ISAMU NOGUCHI FOUNDATION AND GARDEN MUSEUM', 'borough'] = 'QUEENS'
filtered_df.loc[filtered_df['name'] == 'ISAMU NOGUCHI MUSEUM AND GARDEN', 'borough'] = 'QUEENS'
filtered_df.loc[filtered_df['name'] == 'JEWISH MUSEUM', 'borough'] = 'MANHATTAN'
filtered_df.loc[filtered_df['name'] == 'LAGUARDIA AND WAGNER ARCHIEVES MUSEUM', 'borough'] = 'QUEENS'
filtered_df.loc[filtered_df['name'] == 'NEUSTADT COLLECTION OF TIFFANY GLASS', 'borough'] = 'QUEENS'
filtered_df.loc[filtered_df['name'] == 'PS1 CONTEMPORARY ART CENTER', 'borough'] = 'QUEENS'
filtered_df.loc[filtered_df['name'] == 'SCULPTURE CENTER', 'borough'] = 'QUEENS'

# Check if the changes are applied
filtered_df[filtered_df['name'].isin(['AMERICAN FOLK ART MUSEUM', 'EL MUSEO DEL BARRIO', 'FDR PRESIDENTIAL LIBRARY',
                                      'ISAMU NOGUCHI FOUNDATION AND GARDEN MUSEUM', 'ISAMU NOGUCHI MUSEUM AND GARDEN',
                                      'JEWISH MUSEUM', 'LAGUARDIA AND WAGNER ARCHIEVES MUSEUM',
                                      'NEUSTADT COLLECTION OF TIFFANY GLASS', 'PS1 CONTEMPORARY ART CENTER', 'SCULPTURE CENTER'])]

# Make the entire 'borough' column uppercase
filtered_df['borough'] = filtered_df['borough'].str.upper()

# Check the changes
filtered_df.head()

# Count the number of museums per borough
museums_per_borough = filtered_df['borough'].value_counts()

# Display the result
print(museums_per_borough)

import matplotlib.pyplot as plt

# Count the number of museums per borough
museums_per_borough = filtered_df['borough'].value_counts()

# Create a pie chart
plt.figure(figsize=(8, 8))
plt.pie(museums_per_borough, labels=museums_per_borough.index, autopct='%1.1f%%', startangle=140, colors=plt.cm.Paired.colors)
plt.title('Number of Museums per Borough')
plt.axis('equal')  # Equal aspect ratio ensures that pie chart is circular
plt.show()

# Filter rows where revenue is 0
zero_revenue_rows = filtered_df[filtered_df['revenue'] == 0]

# Display the number of rows with zero revenue
print(f"Number of rows with zero revenue: {len(zero_revenue_rows)}")

# Optionally, display the rows with zero revenue
print(zero_revenue_rows[['name', 'borough', 'revenue']])

# Replace zero revenue values with the median of the revenue column
median_revenue = filtered_df['revenue'].median()

# Replace the zero revenue values
filtered_df['revenue'] = filtered_df['revenue'].replace(0, median_revenue)

# Group by 'borough' and describe revenue for each group
borough_revenue_description = filtered_df.groupby('borough')['revenue'].describe()

# Display the result
print(borough_revenue_description)

# Group by 'borough' and find the organization with the maximum revenue in each borough
max_revenue_per_borough = filtered_df.loc[filtered_df.groupby('borough')['revenue'].idxmax()]

# Display the results
max_revenue_per_borough[['borough', 'name', 'revenue', 'admin_street_address']]